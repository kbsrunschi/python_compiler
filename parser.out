Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> external_declaration
Rule 2     program -> program external_declaration
Rule 3     external_declaration -> declaration
Rule 4     external_declaration -> EXTERN_DECLARATION declaration
Rule 5     external_declaration -> function_definition
Rule 6     function_definition -> type function_declarator decl_glb_fct compound_instruction
Rule 7     decl_glb_fct -> <empty>
Rule 8     declaration -> type declarator_list SEMICOLON
Rule 9     type -> INTEGER_DECLARATION
Rule 10    type -> STRING_DECLARATION
Rule 11    declarator_list -> declarator
Rule 12    declarator_list -> declarator_list COMMA declarator
Rule 13    declaration_list -> declaration
Rule 14    declaration_list -> declaration_list declaration
Rule 15    declarator -> IDENT
Rule 16    declarator -> function_declarator
Rule 17    function_declarator -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 18    function_declarator -> IDENT LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
Rule 19    parameter_list -> parameter_declaration
Rule 20    parameter_list -> parameter_list COMMA parameter_declaration
Rule 21    instruction -> SEMICOLON
Rule 22    instruction -> compound_instruction
Rule 23    instruction -> expression_instruction
Rule 24    instruction -> iteration_instruction
Rule 25    instruction -> select_instruction
Rule 26    instruction -> jump_instruction
Rule 27    expression_instruction -> expression SEMICOLON
Rule 28    expression_instruction -> assignment SEMICOLON
Rule 29    parameter_declaration -> type IDENT
Rule 30    assignment -> IDENT ASSIGNMENT expression
Rule 31    compound_instruction -> block_start declaration_list instruction_list block_end
Rule 32    compound_instruction -> block_start declaration_list block_end
Rule 33    compound_instruction -> block_start instruction_list block_end
Rule 34    compound_instruction -> block_start block_end
Rule 35    block_start -> LEFT_BRACKET
Rule 36    block_end -> RIGHT_BRACKET
Rule 37    instruction_list -> instruction
Rule 38    instruction_list -> instruction_list instruction
Rule 39    select_instruction -> cond_instruction instruction
Rule 40    select_instruction -> cond_instruction instruction ELSE instruction
Rule 41    cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
Rule 42    iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
Rule 43    iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
Rule 44    iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
Rule 45    jump_instruction -> RETURN expression SEMICOLON
Rule 46    condition -> expression comparison_operator expression
Rule 47    comparison_operator -> EGAL
Rule 48    comparison_operator -> DIFF
Rule 49    comparison_operator -> INF
Rule 50    comparison_operator -> SUP
Rule 51    comparison_operator -> INFEQUAL
Rule 52    comparison_operator -> SUPEQUAL
Rule 53    expression -> expression_additive
Rule 54    expression -> expression SHIFTLEFT expression_additive
Rule 55    expression -> expression SHIFTRIGHT expression_additive
Rule 56    expression_additive -> expression_multiplicative
Rule 57    expression_additive -> expression_additive PLUS expression_multiplicative
Rule 58    expression_additive -> expression_additive MINUS expression_multiplicative
Rule 59    expression_multiplicative -> unary_expression
Rule 60    expression_multiplicative -> expression_multiplicative MULTI unary_expression
Rule 61    expression_multiplicative -> expression_multiplicative DIV unary_expression
Rule 62    expression_multiplicative -> expression_multiplicative MODULO unary_expression
Rule 63    unary_expression -> expression_postfixee
Rule 64    unary_expression -> MINUS unary_expression
Rule 65    argument_expression_list -> expression
Rule 66    argument_expression_list -> argument_expression_list COMMA expression
Rule 67    expression_postfixee -> primary_expression
Rule 68    expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 69    expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 70    primary_expression -> IDENT
Rule 71    primary_expression -> CONST_INT
Rule 72    primary_expression -> CONST_STRING
Rule 73    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

Terminals, with rules where they appear

ASSIGNMENT           : 30
COMMA                : 12 20 66
COMMENT              : 
CONST_INT            : 71
CONST_STRING         : 72
DIFF                 : 48
DIV                  : 61
DO                   : 43
EGAL                 : 47
ELSE                 : 40
EXTERN_DECLARATION   : 4
FOR                  : 44
IDENT                : 15 17 18 29 30 68 69 70
IF                   : 41
INF                  : 49
INFEQUAL             : 51
INTEGER_DECLARATION  : 9
LEFT_BRACKET         : 35
LEFT_PARENTHESIS     : 17 18 41 42 43 44 68 69 73
MINUS                : 58 64
MODULO               : 62
MULTI                : 60
PLUS                 : 57
RETURN               : 45
RIGHT_BRACKET        : 36
RIGHT_PARENTHESIS    : 17 18 41 42 43 44 68 69 73
SEMICOLON            : 8 21 27 28 44 44 45
SHIFTLEFT            : 54
SHIFTRIGHT           : 55
STRING_DECLARATION   : 10
SUP                  : 50
SUPEQUAL             : 52
WHILE                : 42 43
error                : 

Nonterminals, with rules where they appear

argument_expression_list : 66 68
assignment           : 28 44 44
block_end            : 31 32 33 34
block_start          : 31 32 33 34
comparison_operator  : 46
compound_instruction : 6 22
cond_instruction     : 39 40
condition            : 41 42 43 44
decl_glb_fct         : 6
declaration          : 3 4 13 14
declaration_list     : 14 31 32
declarator           : 11 12
declarator_list      : 8 12
expression           : 27 30 45 46 46 54 55 65 66 73
expression_additive  : 53 54 55 57 58
expression_instruction : 23
expression_multiplicative : 56 57 58 60 61 62
expression_postfixee : 63
external_declaration : 1 2
function_declarator  : 6 16
function_definition  : 5
instruction          : 37 38 39 40 40 42 43 44
instruction_list     : 31 33 38
iteration_instruction : 24
jump_instruction     : 26
parameter_declaration : 19 20
parameter_list       : 18 20
primary_expression   : 67
program              : 2 0
select_instruction   : 25
type                 : 6 8 29
unary_expression     : 59 60 61 62 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . external_declaration
    (2) program -> . program external_declaration
    (3) external_declaration -> . declaration
    (4) external_declaration -> . EXTERN_DECLARATION declaration
    (5) external_declaration -> . function_definition
    (8) declaration -> . type declarator_list SEMICOLON
    (6) function_definition -> . type function_declarator decl_glb_fct compound_instruction
    (9) type -> . INTEGER_DECLARATION
    (10) type -> . STRING_DECLARATION

    EXTERN_DECLARATION shift and go to state 5
    INTEGER_DECLARATION shift and go to state 4
    STRING_DECLARATION shift and go to state 3

    external_declaration           shift and go to state 1
    function_definition            shift and go to state 2
    program                        shift and go to state 6
    declaration                    shift and go to state 7
    type                           shift and go to state 8

state 1

    (1) program -> external_declaration .

    EXTERN_DECLARATION reduce using rule 1 (program -> external_declaration .)
    INTEGER_DECLARATION reduce using rule 1 (program -> external_declaration .)
    STRING_DECLARATION reduce using rule 1 (program -> external_declaration .)
    $end            reduce using rule 1 (program -> external_declaration .)


state 2

    (5) external_declaration -> function_definition .

    EXTERN_DECLARATION reduce using rule 5 (external_declaration -> function_definition .)
    INTEGER_DECLARATION reduce using rule 5 (external_declaration -> function_definition .)
    STRING_DECLARATION reduce using rule 5 (external_declaration -> function_definition .)
    $end            reduce using rule 5 (external_declaration -> function_definition .)


state 3

    (10) type -> STRING_DECLARATION .

    IDENT           reduce using rule 10 (type -> STRING_DECLARATION .)


state 4

    (9) type -> INTEGER_DECLARATION .

    IDENT           reduce using rule 9 (type -> INTEGER_DECLARATION .)


state 5

    (4) external_declaration -> EXTERN_DECLARATION . declaration
    (8) declaration -> . type declarator_list SEMICOLON
    (9) type -> . INTEGER_DECLARATION
    (10) type -> . STRING_DECLARATION

    INTEGER_DECLARATION shift and go to state 4
    STRING_DECLARATION shift and go to state 3

    type                           shift and go to state 10
    declaration                    shift and go to state 9

state 6

    (0) S' -> program .
    (2) program -> program . external_declaration
    (3) external_declaration -> . declaration
    (4) external_declaration -> . EXTERN_DECLARATION declaration
    (5) external_declaration -> . function_definition
    (8) declaration -> . type declarator_list SEMICOLON
    (6) function_definition -> . type function_declarator decl_glb_fct compound_instruction
    (9) type -> . INTEGER_DECLARATION
    (10) type -> . STRING_DECLARATION

    EXTERN_DECLARATION shift and go to state 5
    INTEGER_DECLARATION shift and go to state 4
    STRING_DECLARATION shift and go to state 3

    external_declaration           shift and go to state 11
    function_definition            shift and go to state 2
    declaration                    shift and go to state 7
    type                           shift and go to state 8

state 7

    (3) external_declaration -> declaration .

    EXTERN_DECLARATION reduce using rule 3 (external_declaration -> declaration .)
    INTEGER_DECLARATION reduce using rule 3 (external_declaration -> declaration .)
    STRING_DECLARATION reduce using rule 3 (external_declaration -> declaration .)
    $end            reduce using rule 3 (external_declaration -> declaration .)


state 8

    (8) declaration -> type . declarator_list SEMICOLON
    (6) function_definition -> type . function_declarator decl_glb_fct compound_instruction
    (11) declarator_list -> . declarator
    (12) declarator_list -> . declarator_list COMMA declarator
    (17) function_declarator -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (18) function_declarator -> . IDENT LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (15) declarator -> . IDENT
    (16) declarator -> . function_declarator

    IDENT           shift and go to state 12

    function_declarator            shift and go to state 13
    declarator                     shift and go to state 14
    declarator_list                shift and go to state 15

state 9

    (4) external_declaration -> EXTERN_DECLARATION declaration .

    EXTERN_DECLARATION reduce using rule 4 (external_declaration -> EXTERN_DECLARATION declaration .)
    INTEGER_DECLARATION reduce using rule 4 (external_declaration -> EXTERN_DECLARATION declaration .)
    STRING_DECLARATION reduce using rule 4 (external_declaration -> EXTERN_DECLARATION declaration .)
    $end            reduce using rule 4 (external_declaration -> EXTERN_DECLARATION declaration .)


state 10

    (8) declaration -> type . declarator_list SEMICOLON
    (11) declarator_list -> . declarator
    (12) declarator_list -> . declarator_list COMMA declarator
    (15) declarator -> . IDENT
    (16) declarator -> . function_declarator
    (17) function_declarator -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (18) function_declarator -> . IDENT LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    IDENT           shift and go to state 16

    function_declarator            shift and go to state 17
    declarator                     shift and go to state 14
    declarator_list                shift and go to state 15

state 11

    (2) program -> program external_declaration .

    EXTERN_DECLARATION reduce using rule 2 (program -> program external_declaration .)
    INTEGER_DECLARATION reduce using rule 2 (program -> program external_declaration .)
    STRING_DECLARATION reduce using rule 2 (program -> program external_declaration .)
    $end            reduce using rule 2 (program -> program external_declaration .)


state 12

    (17) function_declarator -> IDENT . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (18) function_declarator -> IDENT . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (15) declarator -> IDENT .

    LEFT_PARENTHESIS shift and go to state 18
    SEMICOLON       reduce using rule 15 (declarator -> IDENT .)
    COMMA           reduce using rule 15 (declarator -> IDENT .)


state 13

    (6) function_definition -> type function_declarator . decl_glb_fct compound_instruction
    (16) declarator -> function_declarator .
    (7) decl_glb_fct -> .

    SEMICOLON       reduce using rule 16 (declarator -> function_declarator .)
    COMMA           reduce using rule 16 (declarator -> function_declarator .)
    LEFT_BRACKET    reduce using rule 7 (decl_glb_fct -> .)

    decl_glb_fct                   shift and go to state 19

state 14

    (11) declarator_list -> declarator .

    SEMICOLON       reduce using rule 11 (declarator_list -> declarator .)
    COMMA           reduce using rule 11 (declarator_list -> declarator .)


state 15

    (8) declaration -> type declarator_list . SEMICOLON
    (12) declarator_list -> declarator_list . COMMA declarator

    SEMICOLON       shift and go to state 21
    COMMA           shift and go to state 20


state 16

    (15) declarator -> IDENT .
    (17) function_declarator -> IDENT . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (18) function_declarator -> IDENT . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    SEMICOLON       reduce using rule 15 (declarator -> IDENT .)
    COMMA           reduce using rule 15 (declarator -> IDENT .)
    LEFT_PARENTHESIS shift and go to state 18


state 17

    (16) declarator -> function_declarator .

    SEMICOLON       reduce using rule 16 (declarator -> function_declarator .)
    COMMA           reduce using rule 16 (declarator -> function_declarator .)


state 18

    (17) function_declarator -> IDENT LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (18) function_declarator -> IDENT LEFT_PARENTHESIS . parameter_list RIGHT_PARENTHESIS
    (19) parameter_list -> . parameter_declaration
    (20) parameter_list -> . parameter_list COMMA parameter_declaration
    (29) parameter_declaration -> . type IDENT
    (9) type -> . INTEGER_DECLARATION
    (10) type -> . STRING_DECLARATION

    RIGHT_PARENTHESIS shift and go to state 24
    INTEGER_DECLARATION shift and go to state 4
    STRING_DECLARATION shift and go to state 3

    parameter_declaration          shift and go to state 23
    type                           shift and go to state 25
    parameter_list                 shift and go to state 22

state 19

    (6) function_definition -> type function_declarator decl_glb_fct . compound_instruction
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (35) block_start -> . LEFT_BRACKET

    LEFT_BRACKET    shift and go to state 28

    compound_instruction           shift and go to state 26
    block_start                    shift and go to state 27

state 20

    (12) declarator_list -> declarator_list COMMA . declarator
    (15) declarator -> . IDENT
    (16) declarator -> . function_declarator
    (17) function_declarator -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (18) function_declarator -> . IDENT LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    IDENT           shift and go to state 16

    function_declarator            shift and go to state 17
    declarator                     shift and go to state 29

state 21

    (8) declaration -> type declarator_list SEMICOLON .

    EXTERN_DECLARATION reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    INTEGER_DECLARATION reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    STRING_DECLARATION reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    $end            reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    RIGHT_BRACKET   reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    WHILE           reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    DO              reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    FOR             reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    RETURN          reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    LEFT_BRACKET    reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    IDENT           reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    IF              reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    MINUS           reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    CONST_INT       reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    CONST_STRING    reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 8 (declaration -> type declarator_list SEMICOLON .)


state 22

    (18) function_declarator -> IDENT LEFT_PARENTHESIS parameter_list . RIGHT_PARENTHESIS
    (20) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_PARENTHESIS shift and go to state 31
    COMMA           shift and go to state 30


state 23

    (19) parameter_list -> parameter_declaration .

    RIGHT_PARENTHESIS reduce using rule 19 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 19 (parameter_list -> parameter_declaration .)


state 24

    (17) function_declarator -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 17 (function_declarator -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 17 (function_declarator -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 17 (function_declarator -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 25

    (29) parameter_declaration -> type . IDENT

    IDENT           shift and go to state 32


state 26

    (6) function_definition -> type function_declarator decl_glb_fct compound_instruction .

    EXTERN_DECLARATION reduce using rule 6 (function_definition -> type function_declarator decl_glb_fct compound_instruction .)
    INTEGER_DECLARATION reduce using rule 6 (function_definition -> type function_declarator decl_glb_fct compound_instruction .)
    STRING_DECLARATION reduce using rule 6 (function_definition -> type function_declarator decl_glb_fct compound_instruction .)
    $end            reduce using rule 6 (function_definition -> type function_declarator decl_glb_fct compound_instruction .)


state 27

    (31) compound_instruction -> block_start . declaration_list instruction_list block_end
    (32) compound_instruction -> block_start . declaration_list block_end
    (33) compound_instruction -> block_start . instruction_list block_end
    (34) compound_instruction -> block_start . block_end
    (13) declaration_list -> . declaration
    (14) declaration_list -> . declaration_list declaration
    (37) instruction_list -> . instruction
    (38) instruction_list -> . instruction_list instruction
    (36) block_end -> . RIGHT_BRACKET
    (8) declaration -> . type declarator_list SEMICOLON
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (9) type -> . INTEGER_DECLARATION
    (10) type -> . STRING_DECLARATION
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    RIGHT_BRACKET   shift and go to state 39
    SEMICOLON       shift and go to state 44
    INTEGER_DECLARATION shift and go to state 4
    STRING_DECLARATION shift and go to state 3
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    cond_instruction               shift and go to state 38
    jump_instruction               shift and go to state 45
    type                           shift and go to state 10
    expression_instruction         shift and go to state 48
    block_end                      shift and go to state 50
    iteration_instruction          shift and go to state 51
    assignment                     shift and go to state 53
    instruction_list               shift and go to state 54
    primary_expression             shift and go to state 55
    declaration                    shift and go to state 56
    expression_postfixee           shift and go to state 37
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 58
    block_start                    shift and go to state 27
    declaration_list               shift and go to state 59
    select_instruction             shift and go to state 60
    expression                     shift and go to state 61
    expression_multiplicative      shift and go to state 62

state 28

    (35) block_start -> LEFT_BRACKET .

    RIGHT_BRACKET   reduce using rule 35 (block_start -> LEFT_BRACKET .)
    SEMICOLON       reduce using rule 35 (block_start -> LEFT_BRACKET .)
    INTEGER_DECLARATION reduce using rule 35 (block_start -> LEFT_BRACKET .)
    STRING_DECLARATION reduce using rule 35 (block_start -> LEFT_BRACKET .)
    WHILE           reduce using rule 35 (block_start -> LEFT_BRACKET .)
    DO              reduce using rule 35 (block_start -> LEFT_BRACKET .)
    FOR             reduce using rule 35 (block_start -> LEFT_BRACKET .)
    RETURN          reduce using rule 35 (block_start -> LEFT_BRACKET .)
    LEFT_BRACKET    reduce using rule 35 (block_start -> LEFT_BRACKET .)
    IDENT           reduce using rule 35 (block_start -> LEFT_BRACKET .)
    IF              reduce using rule 35 (block_start -> LEFT_BRACKET .)
    MINUS           reduce using rule 35 (block_start -> LEFT_BRACKET .)
    CONST_INT       reduce using rule 35 (block_start -> LEFT_BRACKET .)
    CONST_STRING    reduce using rule 35 (block_start -> LEFT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 35 (block_start -> LEFT_BRACKET .)


state 29

    (12) declarator_list -> declarator_list COMMA declarator .

    SEMICOLON       reduce using rule 12 (declarator_list -> declarator_list COMMA declarator .)
    COMMA           reduce using rule 12 (declarator_list -> declarator_list COMMA declarator .)


state 30

    (20) parameter_list -> parameter_list COMMA . parameter_declaration
    (29) parameter_declaration -> . type IDENT
    (9) type -> . INTEGER_DECLARATION
    (10) type -> . STRING_DECLARATION

    INTEGER_DECLARATION shift and go to state 4
    STRING_DECLARATION shift and go to state 3

    parameter_declaration          shift and go to state 63
    type                           shift and go to state 25

state 31

    (18) function_declarator -> IDENT LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 18 (function_declarator -> IDENT LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 18 (function_declarator -> IDENT LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 18 (function_declarator -> IDENT LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)


state 32

    (29) parameter_declaration -> type IDENT .

    RIGHT_PARENTHESIS reduce using rule 29 (parameter_declaration -> type IDENT .)
    COMMA           reduce using rule 29 (parameter_declaration -> type IDENT .)


state 33

    (43) iteration_instruction -> DO . instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    SEMICOLON       shift and go to state 44
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    expression_instruction         shift and go to state 48
    iteration_instruction          shift and go to state 51
    unary_expression               shift and go to state 35
    assignment                     shift and go to state 53
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 64
    block_start                    shift and go to state 27
    cond_instruction               shift and go to state 38
    expression_multiplicative      shift and go to state 62
    select_instruction             shift and go to state 60
    jump_instruction               shift and go to state 45
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 61
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55

state 34

    (72) primary_expression -> CONST_STRING .

    MULTI           reduce using rule 72 (primary_expression -> CONST_STRING .)
    DIV             reduce using rule 72 (primary_expression -> CONST_STRING .)
    MODULO          reduce using rule 72 (primary_expression -> CONST_STRING .)
    PLUS            reduce using rule 72 (primary_expression -> CONST_STRING .)
    MINUS           reduce using rule 72 (primary_expression -> CONST_STRING .)
    SEMICOLON       reduce using rule 72 (primary_expression -> CONST_STRING .)
    SHIFTLEFT       reduce using rule 72 (primary_expression -> CONST_STRING .)
    SHIFTRIGHT      reduce using rule 72 (primary_expression -> CONST_STRING .)
    RIGHT_PARENTHESIS reduce using rule 72 (primary_expression -> CONST_STRING .)
    EGAL            reduce using rule 72 (primary_expression -> CONST_STRING .)
    DIFF            reduce using rule 72 (primary_expression -> CONST_STRING .)
    INF             reduce using rule 72 (primary_expression -> CONST_STRING .)
    SUP             reduce using rule 72 (primary_expression -> CONST_STRING .)
    INFEQUAL        reduce using rule 72 (primary_expression -> CONST_STRING .)
    SUPEQUAL        reduce using rule 72 (primary_expression -> CONST_STRING .)
    COMMA           reduce using rule 72 (primary_expression -> CONST_STRING .)


state 35

    (59) expression_multiplicative -> unary_expression .

    MULTI           reduce using rule 59 (expression_multiplicative -> unary_expression .)
    DIV             reduce using rule 59 (expression_multiplicative -> unary_expression .)
    MODULO          reduce using rule 59 (expression_multiplicative -> unary_expression .)
    PLUS            reduce using rule 59 (expression_multiplicative -> unary_expression .)
    MINUS           reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SEMICOLON       reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SHIFTLEFT       reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SHIFTRIGHT      reduce using rule 59 (expression_multiplicative -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 59 (expression_multiplicative -> unary_expression .)
    COMMA           reduce using rule 59 (expression_multiplicative -> unary_expression .)
    EGAL            reduce using rule 59 (expression_multiplicative -> unary_expression .)
    DIFF            reduce using rule 59 (expression_multiplicative -> unary_expression .)
    INF             reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SUP             reduce using rule 59 (expression_multiplicative -> unary_expression .)
    INFEQUAL        reduce using rule 59 (expression_multiplicative -> unary_expression .)
    SUPEQUAL        reduce using rule 59 (expression_multiplicative -> unary_expression .)


state 36

    (53) expression -> expression_additive .
    (57) expression_additive -> expression_additive . PLUS expression_multiplicative
    (58) expression_additive -> expression_additive . MINUS expression_multiplicative

    SHIFTLEFT       reduce using rule 53 (expression -> expression_additive .)
    SHIFTRIGHT      reduce using rule 53 (expression -> expression_additive .)
    EGAL            reduce using rule 53 (expression -> expression_additive .)
    DIFF            reduce using rule 53 (expression -> expression_additive .)
    INF             reduce using rule 53 (expression -> expression_additive .)
    SUP             reduce using rule 53 (expression -> expression_additive .)
    INFEQUAL        reduce using rule 53 (expression -> expression_additive .)
    SUPEQUAL        reduce using rule 53 (expression -> expression_additive .)
    RIGHT_PARENTHESIS reduce using rule 53 (expression -> expression_additive .)
    COMMA           reduce using rule 53 (expression -> expression_additive .)
    SEMICOLON       reduce using rule 53 (expression -> expression_additive .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66


state 37

    (63) unary_expression -> expression_postfixee .

    MULTI           reduce using rule 63 (unary_expression -> expression_postfixee .)
    DIV             reduce using rule 63 (unary_expression -> expression_postfixee .)
    MODULO          reduce using rule 63 (unary_expression -> expression_postfixee .)
    PLUS            reduce using rule 63 (unary_expression -> expression_postfixee .)
    MINUS           reduce using rule 63 (unary_expression -> expression_postfixee .)
    SEMICOLON       reduce using rule 63 (unary_expression -> expression_postfixee .)
    SHIFTLEFT       reduce using rule 63 (unary_expression -> expression_postfixee .)
    SHIFTRIGHT      reduce using rule 63 (unary_expression -> expression_postfixee .)
    RIGHT_PARENTHESIS reduce using rule 63 (unary_expression -> expression_postfixee .)
    EGAL            reduce using rule 63 (unary_expression -> expression_postfixee .)
    DIFF            reduce using rule 63 (unary_expression -> expression_postfixee .)
    INF             reduce using rule 63 (unary_expression -> expression_postfixee .)
    SUP             reduce using rule 63 (unary_expression -> expression_postfixee .)
    INFEQUAL        reduce using rule 63 (unary_expression -> expression_postfixee .)
    SUPEQUAL        reduce using rule 63 (unary_expression -> expression_postfixee .)
    COMMA           reduce using rule 63 (unary_expression -> expression_postfixee .)


state 38

    (39) select_instruction -> cond_instruction . instruction
    (40) select_instruction -> cond_instruction . instruction ELSE instruction
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    SEMICOLON       shift and go to state 44
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    expression_instruction         shift and go to state 48
    iteration_instruction          shift and go to state 51
    unary_expression               shift and go to state 35
    assignment                     shift and go to state 53
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 67
    cond_instruction               shift and go to state 38
    block_start                    shift and go to state 27
    expression_multiplicative      shift and go to state 62
    select_instruction             shift and go to state 60
    jump_instruction               shift and go to state 45
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 61
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55

state 39

    (36) block_end -> RIGHT_BRACKET .

    EXTERN_DECLARATION reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    INTEGER_DECLARATION reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    STRING_DECLARATION reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    $end            reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    WHILE           reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    DO              reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    FOR             reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    RETURN          reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    IDENT           reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    IF              reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    MINUS           reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    CONST_INT       reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    CONST_STRING    reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 36 (block_end -> RIGHT_BRACKET .)
    ELSE            reduce using rule 36 (block_end -> RIGHT_BRACKET .)


state 40

    (42) iteration_instruction -> WHILE . LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction

    LEFT_PARENTHESIS shift and go to state 68


state 41

    (71) primary_expression -> CONST_INT .

    MULTI           reduce using rule 71 (primary_expression -> CONST_INT .)
    DIV             reduce using rule 71 (primary_expression -> CONST_INT .)
    MODULO          reduce using rule 71 (primary_expression -> CONST_INT .)
    PLUS            reduce using rule 71 (primary_expression -> CONST_INT .)
    MINUS           reduce using rule 71 (primary_expression -> CONST_INT .)
    SEMICOLON       reduce using rule 71 (primary_expression -> CONST_INT .)
    SHIFTLEFT       reduce using rule 71 (primary_expression -> CONST_INT .)
    SHIFTRIGHT      reduce using rule 71 (primary_expression -> CONST_INT .)
    RIGHT_PARENTHESIS reduce using rule 71 (primary_expression -> CONST_INT .)
    EGAL            reduce using rule 71 (primary_expression -> CONST_INT .)
    DIFF            reduce using rule 71 (primary_expression -> CONST_INT .)
    INF             reduce using rule 71 (primary_expression -> CONST_INT .)
    SUP             reduce using rule 71 (primary_expression -> CONST_INT .)
    INFEQUAL        reduce using rule 71 (primary_expression -> CONST_INT .)
    SUPEQUAL        reduce using rule 71 (primary_expression -> CONST_INT .)
    COMMA           reduce using rule 71 (primary_expression -> CONST_INT .)


state 42

    (45) jump_instruction -> RETURN . expression SEMICOLON
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 70
    expression_multiplicative      shift and go to state 62

state 43

    (64) unary_expression -> MINUS . unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    expression_postfixee           shift and go to state 37
    primary_expression             shift and go to state 55
    unary_expression               shift and go to state 71

state 44

    (21) instruction -> SEMICOLON .

    RIGHT_BRACKET   reduce using rule 21 (instruction -> SEMICOLON .)
    SEMICOLON       reduce using rule 21 (instruction -> SEMICOLON .)
    WHILE           reduce using rule 21 (instruction -> SEMICOLON .)
    DO              reduce using rule 21 (instruction -> SEMICOLON .)
    FOR             reduce using rule 21 (instruction -> SEMICOLON .)
    RETURN          reduce using rule 21 (instruction -> SEMICOLON .)
    LEFT_BRACKET    reduce using rule 21 (instruction -> SEMICOLON .)
    IDENT           reduce using rule 21 (instruction -> SEMICOLON .)
    IF              reduce using rule 21 (instruction -> SEMICOLON .)
    MINUS           reduce using rule 21 (instruction -> SEMICOLON .)
    CONST_INT       reduce using rule 21 (instruction -> SEMICOLON .)
    CONST_STRING    reduce using rule 21 (instruction -> SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 21 (instruction -> SEMICOLON .)
    ELSE            reduce using rule 21 (instruction -> SEMICOLON .)


state 45

    (26) instruction -> jump_instruction .

    RIGHT_BRACKET   reduce using rule 26 (instruction -> jump_instruction .)
    SEMICOLON       reduce using rule 26 (instruction -> jump_instruction .)
    WHILE           reduce using rule 26 (instruction -> jump_instruction .)
    DO              reduce using rule 26 (instruction -> jump_instruction .)
    FOR             reduce using rule 26 (instruction -> jump_instruction .)
    RETURN          reduce using rule 26 (instruction -> jump_instruction .)
    LEFT_BRACKET    reduce using rule 26 (instruction -> jump_instruction .)
    IDENT           reduce using rule 26 (instruction -> jump_instruction .)
    IF              reduce using rule 26 (instruction -> jump_instruction .)
    MINUS           reduce using rule 26 (instruction -> jump_instruction .)
    CONST_INT       reduce using rule 26 (instruction -> jump_instruction .)
    CONST_STRING    reduce using rule 26 (instruction -> jump_instruction .)
    LEFT_PARENTHESIS reduce using rule 26 (instruction -> jump_instruction .)
    ELSE            reduce using rule 26 (instruction -> jump_instruction .)


state 46

    (41) cond_instruction -> IF . LEFT_PARENTHESIS condition RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 72


state 47

    (73) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 73
    expression_multiplicative      shift and go to state 62

state 48

    (23) instruction -> expression_instruction .

    RIGHT_BRACKET   reduce using rule 23 (instruction -> expression_instruction .)
    SEMICOLON       reduce using rule 23 (instruction -> expression_instruction .)
    WHILE           reduce using rule 23 (instruction -> expression_instruction .)
    DO              reduce using rule 23 (instruction -> expression_instruction .)
    FOR             reduce using rule 23 (instruction -> expression_instruction .)
    RETURN          reduce using rule 23 (instruction -> expression_instruction .)
    LEFT_BRACKET    reduce using rule 23 (instruction -> expression_instruction .)
    IDENT           reduce using rule 23 (instruction -> expression_instruction .)
    IF              reduce using rule 23 (instruction -> expression_instruction .)
    MINUS           reduce using rule 23 (instruction -> expression_instruction .)
    CONST_INT       reduce using rule 23 (instruction -> expression_instruction .)
    CONST_STRING    reduce using rule 23 (instruction -> expression_instruction .)
    LEFT_PARENTHESIS reduce using rule 23 (instruction -> expression_instruction .)
    ELSE            reduce using rule 23 (instruction -> expression_instruction .)


state 49

    (30) assignment -> IDENT . ASSIGNMENT expression
    (68) expression_postfixee -> IDENT . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> IDENT . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> IDENT .

    ASSIGNMENT      shift and go to state 74
    LEFT_PARENTHESIS shift and go to state 75
    MULTI           reduce using rule 70 (primary_expression -> IDENT .)
    DIV             reduce using rule 70 (primary_expression -> IDENT .)
    MODULO          reduce using rule 70 (primary_expression -> IDENT .)
    PLUS            reduce using rule 70 (primary_expression -> IDENT .)
    MINUS           reduce using rule 70 (primary_expression -> IDENT .)
    SEMICOLON       reduce using rule 70 (primary_expression -> IDENT .)
    SHIFTLEFT       reduce using rule 70 (primary_expression -> IDENT .)
    SHIFTRIGHT      reduce using rule 70 (primary_expression -> IDENT .)


state 50

    (34) compound_instruction -> block_start block_end .

    ELSE            reduce using rule 34 (compound_instruction -> block_start block_end .)
    RIGHT_BRACKET   reduce using rule 34 (compound_instruction -> block_start block_end .)
    SEMICOLON       reduce using rule 34 (compound_instruction -> block_start block_end .)
    WHILE           reduce using rule 34 (compound_instruction -> block_start block_end .)
    DO              reduce using rule 34 (compound_instruction -> block_start block_end .)
    FOR             reduce using rule 34 (compound_instruction -> block_start block_end .)
    RETURN          reduce using rule 34 (compound_instruction -> block_start block_end .)
    LEFT_BRACKET    reduce using rule 34 (compound_instruction -> block_start block_end .)
    IDENT           reduce using rule 34 (compound_instruction -> block_start block_end .)
    IF              reduce using rule 34 (compound_instruction -> block_start block_end .)
    MINUS           reduce using rule 34 (compound_instruction -> block_start block_end .)
    CONST_INT       reduce using rule 34 (compound_instruction -> block_start block_end .)
    CONST_STRING    reduce using rule 34 (compound_instruction -> block_start block_end .)
    LEFT_PARENTHESIS reduce using rule 34 (compound_instruction -> block_start block_end .)
    EXTERN_DECLARATION reduce using rule 34 (compound_instruction -> block_start block_end .)
    INTEGER_DECLARATION reduce using rule 34 (compound_instruction -> block_start block_end .)
    STRING_DECLARATION reduce using rule 34 (compound_instruction -> block_start block_end .)
    $end            reduce using rule 34 (compound_instruction -> block_start block_end .)


state 51

    (24) instruction -> iteration_instruction .

    RIGHT_BRACKET   reduce using rule 24 (instruction -> iteration_instruction .)
    SEMICOLON       reduce using rule 24 (instruction -> iteration_instruction .)
    WHILE           reduce using rule 24 (instruction -> iteration_instruction .)
    DO              reduce using rule 24 (instruction -> iteration_instruction .)
    FOR             reduce using rule 24 (instruction -> iteration_instruction .)
    RETURN          reduce using rule 24 (instruction -> iteration_instruction .)
    LEFT_BRACKET    reduce using rule 24 (instruction -> iteration_instruction .)
    IDENT           reduce using rule 24 (instruction -> iteration_instruction .)
    IF              reduce using rule 24 (instruction -> iteration_instruction .)
    MINUS           reduce using rule 24 (instruction -> iteration_instruction .)
    CONST_INT       reduce using rule 24 (instruction -> iteration_instruction .)
    CONST_STRING    reduce using rule 24 (instruction -> iteration_instruction .)
    LEFT_PARENTHESIS reduce using rule 24 (instruction -> iteration_instruction .)
    ELSE            reduce using rule 24 (instruction -> iteration_instruction .)


state 52

    (44) iteration_instruction -> FOR . LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction

    LEFT_PARENTHESIS shift and go to state 76


state 53

    (28) expression_instruction -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 77


state 54

    (33) compound_instruction -> block_start instruction_list . block_end
    (38) instruction_list -> instruction_list . instruction
    (36) block_end -> . RIGHT_BRACKET
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    RIGHT_BRACKET   shift and go to state 39
    SEMICOLON       shift and go to state 44
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    expression_instruction         shift and go to state 48
    block_end                      shift and go to state 78
    iteration_instruction          shift and go to state 51
    unary_expression               shift and go to state 35
    assignment                     shift and go to state 53
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 79
    block_start                    shift and go to state 27
    cond_instruction               shift and go to state 38
    expression_multiplicative      shift and go to state 62
    select_instruction             shift and go to state 60
    jump_instruction               shift and go to state 45
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 61
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55

state 55

    (67) expression_postfixee -> primary_expression .

    MULTI           reduce using rule 67 (expression_postfixee -> primary_expression .)
    DIV             reduce using rule 67 (expression_postfixee -> primary_expression .)
    MODULO          reduce using rule 67 (expression_postfixee -> primary_expression .)
    PLUS            reduce using rule 67 (expression_postfixee -> primary_expression .)
    MINUS           reduce using rule 67 (expression_postfixee -> primary_expression .)
    SEMICOLON       reduce using rule 67 (expression_postfixee -> primary_expression .)
    SHIFTLEFT       reduce using rule 67 (expression_postfixee -> primary_expression .)
    SHIFTRIGHT      reduce using rule 67 (expression_postfixee -> primary_expression .)
    RIGHT_PARENTHESIS reduce using rule 67 (expression_postfixee -> primary_expression .)
    EGAL            reduce using rule 67 (expression_postfixee -> primary_expression .)
    DIFF            reduce using rule 67 (expression_postfixee -> primary_expression .)
    INF             reduce using rule 67 (expression_postfixee -> primary_expression .)
    SUP             reduce using rule 67 (expression_postfixee -> primary_expression .)
    INFEQUAL        reduce using rule 67 (expression_postfixee -> primary_expression .)
    SUPEQUAL        reduce using rule 67 (expression_postfixee -> primary_expression .)
    COMMA           reduce using rule 67 (expression_postfixee -> primary_expression .)


state 56

    (13) declaration_list -> declaration .

    RIGHT_BRACKET   reduce using rule 13 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 13 (declaration_list -> declaration .)
    INTEGER_DECLARATION reduce using rule 13 (declaration_list -> declaration .)
    STRING_DECLARATION reduce using rule 13 (declaration_list -> declaration .)
    WHILE           reduce using rule 13 (declaration_list -> declaration .)
    DO              reduce using rule 13 (declaration_list -> declaration .)
    FOR             reduce using rule 13 (declaration_list -> declaration .)
    RETURN          reduce using rule 13 (declaration_list -> declaration .)
    LEFT_BRACKET    reduce using rule 13 (declaration_list -> declaration .)
    IDENT           reduce using rule 13 (declaration_list -> declaration .)
    IF              reduce using rule 13 (declaration_list -> declaration .)
    MINUS           reduce using rule 13 (declaration_list -> declaration .)
    CONST_INT       reduce using rule 13 (declaration_list -> declaration .)
    CONST_STRING    reduce using rule 13 (declaration_list -> declaration .)
    LEFT_PARENTHESIS reduce using rule 13 (declaration_list -> declaration .)


state 57

    (22) instruction -> compound_instruction .

    RIGHT_BRACKET   reduce using rule 22 (instruction -> compound_instruction .)
    SEMICOLON       reduce using rule 22 (instruction -> compound_instruction .)
    WHILE           reduce using rule 22 (instruction -> compound_instruction .)
    DO              reduce using rule 22 (instruction -> compound_instruction .)
    FOR             reduce using rule 22 (instruction -> compound_instruction .)
    RETURN          reduce using rule 22 (instruction -> compound_instruction .)
    LEFT_BRACKET    reduce using rule 22 (instruction -> compound_instruction .)
    IDENT           reduce using rule 22 (instruction -> compound_instruction .)
    IF              reduce using rule 22 (instruction -> compound_instruction .)
    MINUS           reduce using rule 22 (instruction -> compound_instruction .)
    CONST_INT       reduce using rule 22 (instruction -> compound_instruction .)
    CONST_STRING    reduce using rule 22 (instruction -> compound_instruction .)
    LEFT_PARENTHESIS reduce using rule 22 (instruction -> compound_instruction .)
    ELSE            reduce using rule 22 (instruction -> compound_instruction .)


state 58

    (37) instruction_list -> instruction .

    RIGHT_BRACKET   reduce using rule 37 (instruction_list -> instruction .)
    SEMICOLON       reduce using rule 37 (instruction_list -> instruction .)
    WHILE           reduce using rule 37 (instruction_list -> instruction .)
    DO              reduce using rule 37 (instruction_list -> instruction .)
    FOR             reduce using rule 37 (instruction_list -> instruction .)
    RETURN          reduce using rule 37 (instruction_list -> instruction .)
    LEFT_BRACKET    reduce using rule 37 (instruction_list -> instruction .)
    IDENT           reduce using rule 37 (instruction_list -> instruction .)
    IF              reduce using rule 37 (instruction_list -> instruction .)
    MINUS           reduce using rule 37 (instruction_list -> instruction .)
    CONST_INT       reduce using rule 37 (instruction_list -> instruction .)
    CONST_STRING    reduce using rule 37 (instruction_list -> instruction .)
    LEFT_PARENTHESIS reduce using rule 37 (instruction_list -> instruction .)


state 59

    (31) compound_instruction -> block_start declaration_list . instruction_list block_end
    (32) compound_instruction -> block_start declaration_list . block_end
    (14) declaration_list -> declaration_list . declaration
    (37) instruction_list -> . instruction
    (38) instruction_list -> . instruction_list instruction
    (36) block_end -> . RIGHT_BRACKET
    (8) declaration -> . type declarator_list SEMICOLON
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (9) type -> . INTEGER_DECLARATION
    (10) type -> . STRING_DECLARATION
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    RIGHT_BRACKET   shift and go to state 39
    SEMICOLON       shift and go to state 44
    INTEGER_DECLARATION shift and go to state 4
    STRING_DECLARATION shift and go to state 3
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    cond_instruction               shift and go to state 38
    jump_instruction               shift and go to state 45
    type                           shift and go to state 10
    expression_instruction         shift and go to state 48
    block_end                      shift and go to state 80
    iteration_instruction          shift and go to state 51
    assignment                     shift and go to state 53
    instruction_list               shift and go to state 81
    primary_expression             shift and go to state 55
    declaration                    shift and go to state 82
    expression_postfixee           shift and go to state 37
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 58
    block_start                    shift and go to state 27
    select_instruction             shift and go to state 60
    expression                     shift and go to state 61
    expression_multiplicative      shift and go to state 62

state 60

    (25) instruction -> select_instruction .

    RIGHT_BRACKET   reduce using rule 25 (instruction -> select_instruction .)
    SEMICOLON       reduce using rule 25 (instruction -> select_instruction .)
    WHILE           reduce using rule 25 (instruction -> select_instruction .)
    DO              reduce using rule 25 (instruction -> select_instruction .)
    FOR             reduce using rule 25 (instruction -> select_instruction .)
    RETURN          reduce using rule 25 (instruction -> select_instruction .)
    LEFT_BRACKET    reduce using rule 25 (instruction -> select_instruction .)
    IDENT           reduce using rule 25 (instruction -> select_instruction .)
    IF              reduce using rule 25 (instruction -> select_instruction .)
    MINUS           reduce using rule 25 (instruction -> select_instruction .)
    CONST_INT       reduce using rule 25 (instruction -> select_instruction .)
    CONST_STRING    reduce using rule 25 (instruction -> select_instruction .)
    LEFT_PARENTHESIS reduce using rule 25 (instruction -> select_instruction .)
    ELSE            reduce using rule 25 (instruction -> select_instruction .)


state 61

    (27) expression_instruction -> expression . SEMICOLON
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    SEMICOLON       shift and go to state 85
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 83


state 62

    (56) expression_additive -> expression_multiplicative .
    (60) expression_multiplicative -> expression_multiplicative . MULTI unary_expression
    (61) expression_multiplicative -> expression_multiplicative . DIV unary_expression
    (62) expression_multiplicative -> expression_multiplicative . MODULO unary_expression

    PLUS            reduce using rule 56 (expression_additive -> expression_multiplicative .)
    MINUS           reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SEMICOLON       reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SHIFTLEFT       reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SHIFTRIGHT      reduce using rule 56 (expression_additive -> expression_multiplicative .)
    EGAL            reduce using rule 56 (expression_additive -> expression_multiplicative .)
    DIFF            reduce using rule 56 (expression_additive -> expression_multiplicative .)
    INF             reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SUP             reduce using rule 56 (expression_additive -> expression_multiplicative .)
    INFEQUAL        reduce using rule 56 (expression_additive -> expression_multiplicative .)
    SUPEQUAL        reduce using rule 56 (expression_additive -> expression_multiplicative .)
    RIGHT_PARENTHESIS reduce using rule 56 (expression_additive -> expression_multiplicative .)
    COMMA           reduce using rule 56 (expression_additive -> expression_multiplicative .)
    MULTI           shift and go to state 87
    DIV             shift and go to state 86
    MODULO          shift and go to state 88


state 63

    (20) parameter_list -> parameter_list COMMA parameter_declaration .

    RIGHT_PARENTHESIS reduce using rule 20 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 20 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 64

    (43) iteration_instruction -> DO instruction . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS

    WHILE           shift and go to state 89


state 65

    (57) expression_additive -> expression_additive PLUS . expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression_multiplicative      shift and go to state 90

state 66

    (58) expression_additive -> expression_additive MINUS . expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression_multiplicative      shift and go to state 91

state 67

    (39) select_instruction -> cond_instruction instruction .
    (40) select_instruction -> cond_instruction instruction . ELSE instruction

  ! shift/reduce conflict for ELSE resolved as shift
    RIGHT_BRACKET   reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    SEMICOLON       reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    WHILE           reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    DO              reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    FOR             reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    RETURN          reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    LEFT_BRACKET    reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    IDENT           reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    IF              reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    MINUS           reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    CONST_INT       reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    CONST_STRING    reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    LEFT_PARENTHESIS reduce using rule 39 (select_instruction -> cond_instruction instruction .)
    ELSE            shift and go to state 92

  ! ELSE            [ reduce using rule 39 (select_instruction -> cond_instruction instruction .) ]


state 68

    (42) iteration_instruction -> WHILE LEFT_PARENTHESIS . condition RIGHT_PARENTHESIS instruction
    (46) condition -> . expression comparison_operator expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    condition                      shift and go to state 93
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 94
    expression_multiplicative      shift and go to state 62
    primary_expression             shift and go to state 55

state 69

    (68) expression_postfixee -> IDENT . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> IDENT . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> IDENT .

    LEFT_PARENTHESIS shift and go to state 75
    MULTI           reduce using rule 70 (primary_expression -> IDENT .)
    DIV             reduce using rule 70 (primary_expression -> IDENT .)
    MODULO          reduce using rule 70 (primary_expression -> IDENT .)
    PLUS            reduce using rule 70 (primary_expression -> IDENT .)
    MINUS           reduce using rule 70 (primary_expression -> IDENT .)
    SEMICOLON       reduce using rule 70 (primary_expression -> IDENT .)
    SHIFTLEFT       reduce using rule 70 (primary_expression -> IDENT .)
    SHIFTRIGHT      reduce using rule 70 (primary_expression -> IDENT .)
    RIGHT_PARENTHESIS reduce using rule 70 (primary_expression -> IDENT .)
    EGAL            reduce using rule 70 (primary_expression -> IDENT .)
    DIFF            reduce using rule 70 (primary_expression -> IDENT .)
    INF             reduce using rule 70 (primary_expression -> IDENT .)
    SUP             reduce using rule 70 (primary_expression -> IDENT .)
    INFEQUAL        reduce using rule 70 (primary_expression -> IDENT .)
    SUPEQUAL        reduce using rule 70 (primary_expression -> IDENT .)
    COMMA           reduce using rule 70 (primary_expression -> IDENT .)


state 70

    (45) jump_instruction -> RETURN expression . SEMICOLON
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    SEMICOLON       shift and go to state 95
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 83


state 71

    (64) unary_expression -> MINUS unary_expression .

    MULTI           reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SHIFTLEFT       reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SHIFTRIGHT      reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    EGAL            reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    DIFF            reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    INF             reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SUP             reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    INFEQUAL        reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    SUPEQUAL        reduce using rule 64 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 64 (unary_expression -> MINUS unary_expression .)


state 72

    (41) cond_instruction -> IF LEFT_PARENTHESIS . condition RIGHT_PARENTHESIS
    (46) condition -> . expression comparison_operator expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    condition                      shift and go to state 96
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 94
    expression_multiplicative      shift and go to state 62
    primary_expression             shift and go to state 55

state 73

    (73) primary_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    RIGHT_PARENTHESIS shift and go to state 97
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 83


state 74

    (30) assignment -> IDENT ASSIGNMENT . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 98
    expression_multiplicative      shift and go to state 62

state 75

    (68) expression_postfixee -> IDENT LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> IDENT LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (65) argument_expression_list -> . expression
    (66) argument_expression_list -> . argument_expression_list COMMA expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 100
    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    argument_expression_list       shift and go to state 99
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 101
    expression_multiplicative      shift and go to state 62

state 76

    (44) iteration_instruction -> FOR LEFT_PARENTHESIS . assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (30) assignment -> . IDENT ASSIGNMENT expression

    IDENT           shift and go to state 102

    assignment                     shift and go to state 103

state 77

    (28) expression_instruction -> assignment SEMICOLON .

    ELSE            reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    RIGHT_BRACKET   reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    SEMICOLON       reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    WHILE           reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    DO              reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    FOR             reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    RETURN          reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    IDENT           reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    IF              reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    MINUS           reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    CONST_INT       reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    CONST_STRING    reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 28 (expression_instruction -> assignment SEMICOLON .)


state 78

    (33) compound_instruction -> block_start instruction_list block_end .

    ELSE            reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    RIGHT_BRACKET   reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    SEMICOLON       reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    WHILE           reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    DO              reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    FOR             reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    RETURN          reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    LEFT_BRACKET    reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    IDENT           reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    IF              reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    MINUS           reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    CONST_INT       reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    CONST_STRING    reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    LEFT_PARENTHESIS reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    EXTERN_DECLARATION reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    INTEGER_DECLARATION reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    STRING_DECLARATION reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)
    $end            reduce using rule 33 (compound_instruction -> block_start instruction_list block_end .)


state 79

    (38) instruction_list -> instruction_list instruction .

    RIGHT_BRACKET   reduce using rule 38 (instruction_list -> instruction_list instruction .)
    SEMICOLON       reduce using rule 38 (instruction_list -> instruction_list instruction .)
    WHILE           reduce using rule 38 (instruction_list -> instruction_list instruction .)
    DO              reduce using rule 38 (instruction_list -> instruction_list instruction .)
    FOR             reduce using rule 38 (instruction_list -> instruction_list instruction .)
    RETURN          reduce using rule 38 (instruction_list -> instruction_list instruction .)
    LEFT_BRACKET    reduce using rule 38 (instruction_list -> instruction_list instruction .)
    IDENT           reduce using rule 38 (instruction_list -> instruction_list instruction .)
    IF              reduce using rule 38 (instruction_list -> instruction_list instruction .)
    MINUS           reduce using rule 38 (instruction_list -> instruction_list instruction .)
    CONST_INT       reduce using rule 38 (instruction_list -> instruction_list instruction .)
    CONST_STRING    reduce using rule 38 (instruction_list -> instruction_list instruction .)
    LEFT_PARENTHESIS reduce using rule 38 (instruction_list -> instruction_list instruction .)


state 80

    (32) compound_instruction -> block_start declaration_list block_end .

    ELSE            reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    RIGHT_BRACKET   reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    SEMICOLON       reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    WHILE           reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    DO              reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    FOR             reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    RETURN          reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    LEFT_BRACKET    reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    IDENT           reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    IF              reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    MINUS           reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    CONST_INT       reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    CONST_STRING    reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    LEFT_PARENTHESIS reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    EXTERN_DECLARATION reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    INTEGER_DECLARATION reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    STRING_DECLARATION reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)
    $end            reduce using rule 32 (compound_instruction -> block_start declaration_list block_end .)


state 81

    (31) compound_instruction -> block_start declaration_list instruction_list . block_end
    (38) instruction_list -> instruction_list . instruction
    (36) block_end -> . RIGHT_BRACKET
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    RIGHT_BRACKET   shift and go to state 39
    SEMICOLON       shift and go to state 44
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    expression_instruction         shift and go to state 48
    block_end                      shift and go to state 104
    iteration_instruction          shift and go to state 51
    unary_expression               shift and go to state 35
    assignment                     shift and go to state 53
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 79
    block_start                    shift and go to state 27
    cond_instruction               shift and go to state 38
    expression_multiplicative      shift and go to state 62
    select_instruction             shift and go to state 60
    jump_instruction               shift and go to state 45
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 61
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55

state 82

    (14) declaration_list -> declaration_list declaration .

    RIGHT_BRACKET   reduce using rule 14 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 14 (declaration_list -> declaration_list declaration .)
    INTEGER_DECLARATION reduce using rule 14 (declaration_list -> declaration_list declaration .)
    STRING_DECLARATION reduce using rule 14 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 14 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 14 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 14 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 14 (declaration_list -> declaration_list declaration .)
    LEFT_BRACKET    reduce using rule 14 (declaration_list -> declaration_list declaration .)
    IDENT           reduce using rule 14 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 14 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 14 (declaration_list -> declaration_list declaration .)
    CONST_INT       reduce using rule 14 (declaration_list -> declaration_list declaration .)
    CONST_STRING    reduce using rule 14 (declaration_list -> declaration_list declaration .)
    LEFT_PARENTHESIS reduce using rule 14 (declaration_list -> declaration_list declaration .)


state 83

    (55) expression -> expression SHIFTRIGHT . expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 105
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression_multiplicative      shift and go to state 62

state 84

    (54) expression -> expression SHIFTLEFT . expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 106
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression_multiplicative      shift and go to state 62

state 85

    (27) expression_instruction -> expression SEMICOLON .

    ELSE            reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    RIGHT_BRACKET   reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    WHILE           reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    DO              reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    FOR             reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    RETURN          reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    LEFT_BRACKET    reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    IDENT           reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    IF              reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    MINUS           reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    CONST_INT       reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    CONST_STRING    reduce using rule 27 (expression_instruction -> expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 27 (expression_instruction -> expression SEMICOLON .)


state 86

    (61) expression_multiplicative -> expression_multiplicative DIV . unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 107
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37

state 87

    (60) expression_multiplicative -> expression_multiplicative MULTI . unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 108
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37

state 88

    (62) expression_multiplicative -> expression_multiplicative MODULO . unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 109
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37

state 89

    (43) iteration_instruction -> DO instruction WHILE . LEFT_PARENTHESIS condition RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 110


state 90

    (57) expression_additive -> expression_additive PLUS expression_multiplicative .
    (60) expression_multiplicative -> expression_multiplicative . MULTI unary_expression
    (61) expression_multiplicative -> expression_multiplicative . DIV unary_expression
    (62) expression_multiplicative -> expression_multiplicative . MODULO unary_expression

    PLUS            reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    MINUS           reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SEMICOLON       reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SHIFTLEFT       reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SHIFTRIGHT      reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    EGAL            reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    DIFF            reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    INF             reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SUP             reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    INFEQUAL        reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    SUPEQUAL        reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    RIGHT_PARENTHESIS reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    COMMA           reduce using rule 57 (expression_additive -> expression_additive PLUS expression_multiplicative .)
    MULTI           shift and go to state 87
    DIV             shift and go to state 86
    MODULO          shift and go to state 88


state 91

    (58) expression_additive -> expression_additive MINUS expression_multiplicative .
    (60) expression_multiplicative -> expression_multiplicative . MULTI unary_expression
    (61) expression_multiplicative -> expression_multiplicative . DIV unary_expression
    (62) expression_multiplicative -> expression_multiplicative . MODULO unary_expression

    PLUS            reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    MINUS           reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SEMICOLON       reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SHIFTLEFT       reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SHIFTRIGHT      reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    EGAL            reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    DIFF            reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    INF             reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SUP             reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    INFEQUAL        reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    SUPEQUAL        reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    RIGHT_PARENTHESIS reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    COMMA           reduce using rule 58 (expression_additive -> expression_additive MINUS expression_multiplicative .)
    MULTI           shift and go to state 87
    DIV             shift and go to state 86
    MODULO          shift and go to state 88


state 92

    (40) select_instruction -> cond_instruction instruction ELSE . instruction
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    SEMICOLON       shift and go to state 44
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    expression_instruction         shift and go to state 48
    iteration_instruction          shift and go to state 51
    unary_expression               shift and go to state 35
    assignment                     shift and go to state 53
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 111
    cond_instruction               shift and go to state 38
    block_start                    shift and go to state 27
    expression_multiplicative      shift and go to state 62
    select_instruction             shift and go to state 60
    jump_instruction               shift and go to state 45
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 61
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55

state 93

    (42) iteration_instruction -> WHILE LEFT_PARENTHESIS condition . RIGHT_PARENTHESIS instruction

    RIGHT_PARENTHESIS shift and go to state 112


state 94

    (46) condition -> expression . comparison_operator expression
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive
    (47) comparison_operator -> . EGAL
    (48) comparison_operator -> . DIFF
    (49) comparison_operator -> . INF
    (50) comparison_operator -> . SUP
    (51) comparison_operator -> . INFEQUAL
    (52) comparison_operator -> . SUPEQUAL

    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 83
    EGAL            shift and go to state 113
    DIFF            shift and go to state 117
    INF             shift and go to state 118
    SUP             shift and go to state 116
    INFEQUAL        shift and go to state 114
    SUPEQUAL        shift and go to state 115

    comparison_operator            shift and go to state 119

state 95

    (45) jump_instruction -> RETURN expression SEMICOLON .

    RIGHT_BRACKET   reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    DO              reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    LEFT_BRACKET    reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    IDENT           reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    IF              reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    CONST_INT       reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    CONST_STRING    reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 45 (jump_instruction -> RETURN expression SEMICOLON .)


state 96

    (41) cond_instruction -> IF LEFT_PARENTHESIS condition . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 120


state 97

    (73) primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    MULTI           reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIV             reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SHIFTLEFT       reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SHIFTRIGHT      reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EGAL            reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIFF            reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INF             reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SUP             reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INFEQUAL        reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SUPEQUAL        reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 73 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 98

    (30) assignment -> IDENT ASSIGNMENT expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    SEMICOLON       reduce using rule 30 (assignment -> IDENT ASSIGNMENT expression .)
    RIGHT_PARENTHESIS reduce using rule 30 (assignment -> IDENT ASSIGNMENT expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 83


state 99

    (68) expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (66) argument_expression_list -> argument_expression_list . COMMA expression

    RIGHT_PARENTHESIS shift and go to state 122
    COMMA           shift and go to state 121


state 100

    (69) expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    MULTI           reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIV             reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SHIFTLEFT       reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SHIFTRIGHT      reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EGAL            reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIFF            reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    INF             reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SUP             reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    INFEQUAL        reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SUPEQUAL        reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 69 (expression_postfixee -> IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 101

    (65) argument_expression_list -> expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    RIGHT_PARENTHESIS reduce using rule 65 (argument_expression_list -> expression .)
    COMMA           reduce using rule 65 (argument_expression_list -> expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 83


state 102

    (30) assignment -> IDENT . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 74


state 103

    (44) iteration_instruction -> FOR LEFT_PARENTHESIS assignment . SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction

    SEMICOLON       shift and go to state 123


state 104

    (31) compound_instruction -> block_start declaration_list instruction_list block_end .

    ELSE            reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    RIGHT_BRACKET   reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    SEMICOLON       reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    WHILE           reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    DO              reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    FOR             reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    RETURN          reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    LEFT_BRACKET    reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    IDENT           reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    IF              reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    MINUS           reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    CONST_INT       reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    CONST_STRING    reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    LEFT_PARENTHESIS reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    EXTERN_DECLARATION reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    INTEGER_DECLARATION reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    STRING_DECLARATION reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)
    $end            reduce using rule 31 (compound_instruction -> block_start declaration_list instruction_list block_end .)


state 105

    (55) expression -> expression SHIFTRIGHT expression_additive .
    (57) expression_additive -> expression_additive . PLUS expression_multiplicative
    (58) expression_additive -> expression_additive . MINUS expression_multiplicative

    SHIFTLEFT       reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    SHIFTRIGHT      reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    EGAL            reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    DIFF            reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    INF             reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    SUP             reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    INFEQUAL        reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    SUPEQUAL        reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    RIGHT_PARENTHESIS reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    COMMA           reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    SEMICOLON       reduce using rule 55 (expression -> expression SHIFTRIGHT expression_additive .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66


state 106

    (54) expression -> expression SHIFTLEFT expression_additive .
    (57) expression_additive -> expression_additive . PLUS expression_multiplicative
    (58) expression_additive -> expression_additive . MINUS expression_multiplicative

    SHIFTLEFT       reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    SHIFTRIGHT      reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    EGAL            reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    DIFF            reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    INF             reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    SUP             reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    INFEQUAL        reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    SUPEQUAL        reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    RIGHT_PARENTHESIS reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    COMMA           reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    SEMICOLON       reduce using rule 54 (expression -> expression SHIFTLEFT expression_additive .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66


state 107

    (61) expression_multiplicative -> expression_multiplicative DIV unary_expression .

    MULTI           reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    DIV             reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    MODULO          reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    PLUS            reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    MINUS           reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SEMICOLON       reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SHIFTLEFT       reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SHIFTRIGHT      reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    COMMA           reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    EGAL            reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    DIFF            reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    INF             reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SUP             reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    INFEQUAL        reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)
    SUPEQUAL        reduce using rule 61 (expression_multiplicative -> expression_multiplicative DIV unary_expression .)


state 108

    (60) expression_multiplicative -> expression_multiplicative MULTI unary_expression .

    MULTI           reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    DIV             reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    MODULO          reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    PLUS            reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    MINUS           reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SEMICOLON       reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SHIFTLEFT       reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SHIFTRIGHT      reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    COMMA           reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    EGAL            reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    DIFF            reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    INF             reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SUP             reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    INFEQUAL        reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)
    SUPEQUAL        reduce using rule 60 (expression_multiplicative -> expression_multiplicative MULTI unary_expression .)


state 109

    (62) expression_multiplicative -> expression_multiplicative MODULO unary_expression .

    MULTI           reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    DIV             reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    MODULO          reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    PLUS            reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    MINUS           reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SEMICOLON       reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SHIFTLEFT       reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SHIFTRIGHT      reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    COMMA           reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    EGAL            reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    DIFF            reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    INF             reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SUP             reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    INFEQUAL        reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)
    SUPEQUAL        reduce using rule 62 (expression_multiplicative -> expression_multiplicative MODULO unary_expression .)


state 110

    (43) iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS . condition RIGHT_PARENTHESIS
    (46) condition -> . expression comparison_operator expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    condition                      shift and go to state 124
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 94
    expression_multiplicative      shift and go to state 62
    primary_expression             shift and go to state 55

state 111

    (40) select_instruction -> cond_instruction instruction ELSE instruction .

    ELSE            reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    RIGHT_BRACKET   reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    SEMICOLON       reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    WHILE           reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    DO              reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    FOR             reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    RETURN          reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    LEFT_BRACKET    reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    IDENT           reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    IF              reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    MINUS           reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    CONST_INT       reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    CONST_STRING    reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)
    LEFT_PARENTHESIS reduce using rule 40 (select_instruction -> cond_instruction instruction ELSE instruction .)


state 112

    (42) iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS . instruction
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    SEMICOLON       shift and go to state 44
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    expression_instruction         shift and go to state 48
    iteration_instruction          shift and go to state 51
    unary_expression               shift and go to state 35
    assignment                     shift and go to state 53
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 125
    block_start                    shift and go to state 27
    cond_instruction               shift and go to state 38
    expression_multiplicative      shift and go to state 62
    select_instruction             shift and go to state 60
    jump_instruction               shift and go to state 45
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 61
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55

state 113

    (47) comparison_operator -> EGAL .

    MINUS           reduce using rule 47 (comparison_operator -> EGAL .)
    IDENT           reduce using rule 47 (comparison_operator -> EGAL .)
    CONST_INT       reduce using rule 47 (comparison_operator -> EGAL .)
    CONST_STRING    reduce using rule 47 (comparison_operator -> EGAL .)
    LEFT_PARENTHESIS reduce using rule 47 (comparison_operator -> EGAL .)


state 114

    (51) comparison_operator -> INFEQUAL .

    MINUS           reduce using rule 51 (comparison_operator -> INFEQUAL .)
    IDENT           reduce using rule 51 (comparison_operator -> INFEQUAL .)
    CONST_INT       reduce using rule 51 (comparison_operator -> INFEQUAL .)
    CONST_STRING    reduce using rule 51 (comparison_operator -> INFEQUAL .)
    LEFT_PARENTHESIS reduce using rule 51 (comparison_operator -> INFEQUAL .)


state 115

    (52) comparison_operator -> SUPEQUAL .

    MINUS           reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    IDENT           reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    CONST_INT       reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    CONST_STRING    reduce using rule 52 (comparison_operator -> SUPEQUAL .)
    LEFT_PARENTHESIS reduce using rule 52 (comparison_operator -> SUPEQUAL .)


state 116

    (50) comparison_operator -> SUP .

    MINUS           reduce using rule 50 (comparison_operator -> SUP .)
    IDENT           reduce using rule 50 (comparison_operator -> SUP .)
    CONST_INT       reduce using rule 50 (comparison_operator -> SUP .)
    CONST_STRING    reduce using rule 50 (comparison_operator -> SUP .)
    LEFT_PARENTHESIS reduce using rule 50 (comparison_operator -> SUP .)


state 117

    (48) comparison_operator -> DIFF .

    MINUS           reduce using rule 48 (comparison_operator -> DIFF .)
    IDENT           reduce using rule 48 (comparison_operator -> DIFF .)
    CONST_INT       reduce using rule 48 (comparison_operator -> DIFF .)
    CONST_STRING    reduce using rule 48 (comparison_operator -> DIFF .)
    LEFT_PARENTHESIS reduce using rule 48 (comparison_operator -> DIFF .)


state 118

    (49) comparison_operator -> INF .

    MINUS           reduce using rule 49 (comparison_operator -> INF .)
    IDENT           reduce using rule 49 (comparison_operator -> INF .)
    CONST_INT       reduce using rule 49 (comparison_operator -> INF .)
    CONST_STRING    reduce using rule 49 (comparison_operator -> INF .)
    LEFT_PARENTHESIS reduce using rule 49 (comparison_operator -> INF .)


state 119

    (46) condition -> expression comparison_operator . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 126
    expression_multiplicative      shift and go to state 62

state 120

    (41) cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    WHILE           reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    DO              reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    FOR             reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    RETURN          reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    IDENT           reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    IF              reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    CONST_INT       reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    CONST_STRING    reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 41 (cond_instruction -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)


state 121

    (66) argument_expression_list -> argument_expression_list COMMA . expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 127
    expression_multiplicative      shift and go to state 62

state 122

    (68) expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    MULTI           reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV             reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SHIFTLEFT       reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SHIFTRIGHT      reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    EGAL            reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIFF            reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INF             reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SUP             reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INFEQUAL        reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SUPEQUAL        reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 68 (expression_postfixee -> IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 123

    (44) iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON . condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (46) condition -> . expression comparison_operator expression
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    MINUS           shift and go to state 43
    IDENT           shift and go to state 69
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    unary_expression               shift and go to state 35
    expression_additive            shift and go to state 36
    expression_multiplicative      shift and go to state 62
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 94
    condition                      shift and go to state 128
    primary_expression             shift and go to state 55

state 124

    (43) iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 129


state 125

    (42) iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .

    ELSE            reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    RIGHT_BRACKET   reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    SEMICOLON       reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    WHILE           reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    DO              reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    FOR             reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    RETURN          reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    LEFT_BRACKET    reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    IDENT           reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    IF              reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    MINUS           reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    CONST_INT       reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    CONST_STRING    reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)
    LEFT_PARENTHESIS reduce using rule 42 (iteration_instruction -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction .)


state 126

    (46) condition -> expression comparison_operator expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    SEMICOLON       reduce using rule 46 (condition -> expression comparison_operator expression .)
    RIGHT_PARENTHESIS reduce using rule 46 (condition -> expression comparison_operator expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 83


state 127

    (66) argument_expression_list -> argument_expression_list COMMA expression .
    (54) expression -> expression . SHIFTLEFT expression_additive
    (55) expression -> expression . SHIFTRIGHT expression_additive

    RIGHT_PARENTHESIS reduce using rule 66 (argument_expression_list -> argument_expression_list COMMA expression .)
    COMMA           reduce using rule 66 (argument_expression_list -> argument_expression_list COMMA expression .)
    SHIFTLEFT       shift and go to state 84
    SHIFTRIGHT      shift and go to state 83


state 128

    (44) iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition . SEMICOLON assignment RIGHT_PARENTHESIS instruction

    SEMICOLON       shift and go to state 130


state 129

    (43) iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .

    ELSE            reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    WHILE           reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    DO              reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    FOR             reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    RETURN          reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    IDENT           reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    IF              reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    CONST_INT       reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    CONST_STRING    reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 43 (iteration_instruction -> DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS .)


state 130

    (44) iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON . assignment RIGHT_PARENTHESIS instruction
    (30) assignment -> . IDENT ASSIGNMENT expression

    IDENT           shift and go to state 102

    assignment                     shift and go to state 131

state 131

    (44) iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment . RIGHT_PARENTHESIS instruction

    RIGHT_PARENTHESIS shift and go to state 132


state 132

    (44) iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS . instruction
    (21) instruction -> . SEMICOLON
    (22) instruction -> . compound_instruction
    (23) instruction -> . expression_instruction
    (24) instruction -> . iteration_instruction
    (25) instruction -> . select_instruction
    (26) instruction -> . jump_instruction
    (31) compound_instruction -> . block_start declaration_list instruction_list block_end
    (32) compound_instruction -> . block_start declaration_list block_end
    (33) compound_instruction -> . block_start instruction_list block_end
    (34) compound_instruction -> . block_start block_end
    (27) expression_instruction -> . expression SEMICOLON
    (28) expression_instruction -> . assignment SEMICOLON
    (42) iteration_instruction -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS instruction
    (43) iteration_instruction -> . DO instruction WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (44) iteration_instruction -> . FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction
    (39) select_instruction -> . cond_instruction instruction
    (40) select_instruction -> . cond_instruction instruction ELSE instruction
    (45) jump_instruction -> . RETURN expression SEMICOLON
    (35) block_start -> . LEFT_BRACKET
    (53) expression -> . expression_additive
    (54) expression -> . expression SHIFTLEFT expression_additive
    (55) expression -> . expression SHIFTRIGHT expression_additive
    (30) assignment -> . IDENT ASSIGNMENT expression
    (41) cond_instruction -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS
    (56) expression_additive -> . expression_multiplicative
    (57) expression_additive -> . expression_additive PLUS expression_multiplicative
    (58) expression_additive -> . expression_additive MINUS expression_multiplicative
    (59) expression_multiplicative -> . unary_expression
    (60) expression_multiplicative -> . expression_multiplicative MULTI unary_expression
    (61) expression_multiplicative -> . expression_multiplicative DIV unary_expression
    (62) expression_multiplicative -> . expression_multiplicative MODULO unary_expression
    (63) unary_expression -> . expression_postfixee
    (64) unary_expression -> . MINUS unary_expression
    (67) expression_postfixee -> . primary_expression
    (68) expression_postfixee -> . IDENT LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (69) expression_postfixee -> . IDENT LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (70) primary_expression -> . IDENT
    (71) primary_expression -> . CONST_INT
    (72) primary_expression -> . CONST_STRING
    (73) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    SEMICOLON       shift and go to state 44
    WHILE           shift and go to state 40
    DO              shift and go to state 33
    FOR             shift and go to state 52
    RETURN          shift and go to state 42
    LEFT_BRACKET    shift and go to state 28
    IDENT           shift and go to state 49
    IF              shift and go to state 46
    MINUS           shift and go to state 43
    CONST_INT       shift and go to state 41
    CONST_STRING    shift and go to state 34
    LEFT_PARENTHESIS shift and go to state 47

    expression_instruction         shift and go to state 48
    iteration_instruction          shift and go to state 51
    unary_expression               shift and go to state 35
    assignment                     shift and go to state 53
    compound_instruction           shift and go to state 57
    instruction                    shift and go to state 133
    block_start                    shift and go to state 27
    cond_instruction               shift and go to state 38
    expression_multiplicative      shift and go to state 62
    select_instruction             shift and go to state 60
    jump_instruction               shift and go to state 45
    expression_postfixee           shift and go to state 37
    expression                     shift and go to state 61
    expression_additive            shift and go to state 36
    primary_expression             shift and go to state 55

state 133

    (44) iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .

    ELSE            reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    RIGHT_BRACKET   reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    SEMICOLON       reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    WHILE           reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    DO              reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    FOR             reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    RETURN          reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    LEFT_BRACKET    reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    IDENT           reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    IF              reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    MINUS           reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    CONST_INT       reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    CONST_STRING    reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)
    LEFT_PARENTHESIS reduce using rule 44 (iteration_instruction -> FOR LEFT_PARENTHESIS assignment SEMICOLON condition SEMICOLON assignment RIGHT_PARENTHESIS instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 67 resolved as shift
